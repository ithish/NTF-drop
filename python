from thirdweb import ThirdwebSDK
from eth_account import Account
from web3 import Web3

# You can switch out this provider and RPC URL for your own
provider = Web3(Web3.HTTPProvider("<RPC_URL>"))
# This will create a random account to use for signing transactions
signer = Account.create()

sdk = ThirdwebSDK(provider, signer)
contract = sdk.get_nft_drop("0x79545A43d5B4c0adDAb2E670f4cb373f48ac0225")

//Claim unique NFTs to a specific Wallet
address = 0x8Cf61fBAa744f65c5Ac9fbdf4FD39cEC3049460d
quantity = 1

tx = contract.claim_to(address, quantity)
receipt = tx.receipt
claimed_token_id = tx.id
claimed_nft = tx.data()

//Create a batch of unique NFTs to be claimed in the future
from thirdweb.types.nft import NFTMetadataInput

# You can customize this metadata however you like
metadatas = [
    NFTMetadataInput.from_json({
        "name": "Cool NFT",
        "description": "This is a cool NFT",
        "image": open("path/to/file.jpg", "rb"),
    }),
    NFTMetadataInput.from_json({
        "name": "Cooler NFT",
        "description": "This is a cooler NFT",
        "image": open("path/to/file.jpg", "rb"),
        
        
        //Transfer a single NFT
        to = "0x8Cf61fBAa744f65c5Ac9fbdf4FD39cEC3049460d"
token_id = 0

receipt = contract.transfer(to, token_id)
    }),
]

txs = contract.create_batch(metadatas)
first_token_id = txs[0].id
first_nft = txs[0].data()

//Get All Minted NFTs
nfts = contract.get_all()
print(nfts)

//Get All Claimed NFTs
claimed_nfts = contract.get_all_claimed()
first_owner = claimed_nfts[0].owner

//Get All Unclaimed NFTs
unclaimed_nfts = contract.get_all_unclaimed()
first_nft_name = unclaimed_nfts[0].name

//Get a single NFT Metadata
nft = contract.get(0)
print(nft)

//Transfer a single NFT
to = "0x8Cf61fBAa744f65c5Ac9fbdf4FD39cEC3049460d"
token_id = 0

receipt = contract.transfer(to, token_id)

